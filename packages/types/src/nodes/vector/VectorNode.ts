// This file was generated by [ts-rs](https://github.com/Aleph-Alpha/ts-rs). Do not edit this file manually.
import type { Annotation } from "../../properties/Annotation";
import type { BlendMode } from "../../properties/BlendMode";
import type { EasingType } from "../../properties/easing/EasingType";
import type { Effect } from "../../properties/Effect";
import type { ExportSetting } from "../../properties/export/ExportSetting";
import type { LayoutAlign } from "../../properties/layout/LayoutAlign";
import type { LayoutConstraint } from "../../properties/layout/LayoutConstraint";
import type { Paint } from "../../properties/paint/Paint";
import type { PaintOverride } from "../../properties/paint/PaintOverride";
import type { Path } from "../../properties/Path";
import type { Rectangle } from "../../properties/Rectangle";
import type { Size } from "../../properties/Size";
import type { StrokeAlign } from "../../properties/stroke/StrokeAlign";
import type { StrokeCap } from "../../properties/stroke/StrokeCap";
import type { StrokeJoin } from "../../properties/stroke/StrokeJoin";
import type { StrokeWeights } from "../../properties/stroke/StrokeWeights";
import type { StyleType } from "../../properties/StyleType";
import type { Transform } from "../../properties/Transform";

export type VectorNode<Data> = { 
/**
 * If true, layer is locked and cannot be edited.
 */
locked: boolean, 
/**
 * An array of export settings representing images to export from the node.
 */
exportSettings: Array<ExportSetting>, 
/**
 * How this node blends with nodes behind it in the scene
 */
blendMode: BlendMode, 
/**
 * Keep height and width constrained to same ratio
 */
preserveRatio: boolean, 
/**
 * Determines if the layer should stretch along the parent’s counter axis. This property is
 * only provided for direct children of auto-layout frames.
 */
layoutAlign: LayoutAlign, 
/**
 * This property is applicable only for direct children of auto-layout frames, ignored
 * otherwise. Determines whether a layer should stretch along the parent’s primary axis. A 0
 * corresponds to a fixed size and 1 corresponds to stretch
 */
layoutGrow: number, 
/**
 * Horizontal and vertical layout constraints for node
 */
constraint: LayoutConstraint, 
/**
 * Node ID of node to transition to in prototyping
 */
transitionNodeId?: string, 
/**
 * The duration of the prototyping transition on this node (in milliseconds)
 */
transitionDuration?: number, 
/**
 * The easing curve used in the prototyping transition on this node
 */
transitionEasing: EasingType, 
/**
 * Opacity of the node
 */
opacity: number, 
/**
 * Bounding box of the node in absolute space coordinates
 */
absoluteBoundingBox: Rectangle, 
/**
 * The actual bounds of a node accounting for drop shadows, thick strokes, and anything else
 * that may fall outside the node's regular bounding box defined in x, y, width, and height.
 * The x and y inside this property represent the absolute position of the node on the page.
 * This value will be null if the node is invisible.
 */
absoluteRenderBounds?: Rectangle, 
/**
 * An array of effects attached to this node (see effects section for more details)
 */
effects: Array<Effect>, 
/**
 * Width and height of element. This is different from the width and height of the bounding
 * box in that the absolute bounding box represents the element after scaling and rotation.
 * Only present if geometry=paths is passed
 */
size: Size, 
/**
 * The top two rows of a matrix that represents the 2D transform of this node relative to its
 * parent. The bottom row of the matrix is implicitly always (0, 0, 1). Use to transform
 * coordinates in geometry. Only present if geometry=paths is passed
 */
relativeTransform: Transform, 
/**
 * Does this node mask sibling nodes in front of it?
 */
isMask: boolean, 
/**
 * An array of fill paints applied to the node
 */
fills: Array<Paint>, 
/**
 * Only specified if parameter geometry=paths is used. An array of paths representing the
 * object fill
 */
fillGeometry: Array<Path>, 
/**
 * Map from ID to PaintOverride for looking up fill overrides. To see which regions are
 * overriden, you must use the geometry=paths option. Each path returned may have an
 * overrideId which maps to this table.
 */
fillOverrideTable: { [key in number]?: PaintOverride }, 
/**
 * An array of stroke paints applied to the node
 */
strokes: Array<Paint>, 
/**
 * The weight of strokes on the node
 */
strokeWeight: number, 
/**
 * An object including the top, bottom, left, and right stroke weights. Only returned if
 * individual stroke weights are used.
 */
individualStrokeWeights: StrokeWeights, 
/**
 * A string enum with values describing the end caps of vector paths.
 */
strokeCap: StrokeCap, 
/**
 *  A string enum with value of "MITER", "BEVEL", or "ROUND", describing how corners in vector
 * paths are rendered.
 */
strokeJoin: StrokeJoin, 
/**
 * An array of floating point numbers describing the pattern of dash length and gap lengths
 * that the vector path follows. For example a value of [1, 2] indicates that the path has a
 * dash of length 1 followed by a gap of length 2, repeated.
 */
strokeDashes: Array<number>, 
/**
 * Only valid if strokeJoin is "MITER". The corner angle, in degrees, below which strokeJoin
 * will be set to "BEVEL" to avoid super sharp corners. By default this is 28.96 degrees.
 */
strokeMiterAngle: number, 
/**
 * Only specified if parameter geometry=paths is used. An array of paths representing the
 * object stroke
 */
strokeGeometry: Array<Path>, 
/**
 * Position of stroke relative to vector outline, as a string enum
 */
strokeAlign: StrokeAlign, 
/**
 * A mapping of a StyleType to style ID (see Style) of styles present on this node. The style
 * ID can be used to look up more information about the style in the top-level styles field.
 */
styles: { [key in StyleType]?: string }, 
/**
 * An array of annotations displaying notes and pinned properties of nodes in Dev Mode.
 * Currently a maximum of 1 annotation is supported.
 */
annotations: Array<Annotation>, addidionalData: Data, };
